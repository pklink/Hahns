{"name":"Hahns","tagline":"micro framework for PHP 5.4+","body":"# Hahns\r\n\r\nHahns is a micro framework for PHP 5.4 and higher.\r\n\r\n## Installation\r\n\r\nTo install using [composer][1], have the following lines in your `composer.json` file.\r\n\r\n```json\r\n{\r\n  \"require\": {\r\n    \"pklink/hahns\": \"*\",\r\n  }\r\n}\r\n```\r\n\r\n## Usage\r\n\r\nCreate application\r\n\r\n```php\r\n$app = new \\Hahns\\Hahns();\r\n```\r\n\r\n\r\n```php\r\n$app->get('/', function () {\r\n    return \"hello world!\";\r\n});\r\n\r\n$app->delete('/', function () {\r\n    return \"1\";\r\n});\r\n```\r\n\r\nEvery GET-request to `/` will respond\r\n\r\n```\r\nhello world!\r\n```\r\n\r\nEvery DELETE-request to `/` will respond\r\n\r\n```\r\n1\r\n```\r\n\r\n### Debug mode\r\n\r\nFor enable debugging pass `true` to the constructor of Hahns\r\n\r\n```php\r\n$app = new \\Hahns\\Hahns(true);\r\n```\r\n\r\n### Parameters for routing callback\r\n\r\nHahns will set parameters based on the required type automatically\r\n\r\nThe following types are built-in:\r\n\r\n* `\\Hahns\\Hahns`\r\n* `\\Hahns\\Config`\r\n* `\\Hahns\\Request`\r\n* `\\Hahns\\Response\\Html`\r\n* `\\Hahns\\Response\\Json`\r\n* `\\Hahns\\Response\\Text`\r\n* `\\Hahns\\Services`\r\n\r\n```php\r\n$app->get('/', function (\\Hahns\\Request $request) {\r\n    // ...\r\n});\r\n\r\n$app->patch('/', function (\\Hahns\\Response\\Json $response) {\r\n    // ...\r\n});\r\n\r\n$app->post('/cars', function (\\Hahns\\Services $services) {\r\n    // ...\r\n});\r\n\r\n$app->get('/cars', function (\\Hahns\\Response\\Json $response, \\Hahns\\Services $services) {\r\n    // ...\r\n});\r\n```\r\n\r\n#### Add your own parameter\r\n\r\n```\r\n$app->parameter('\\\\stdClass', function() {\r\n    $obj = new stdClass();\r\n    $obj->test = 'yup';\r\n    return $obj;\r\n});\r\n\r\n$app->get('/own/parameter', function (\\stdClass $obj) {\r\n    return $obj->test;\r\n});\r\n```\r\n\r\nThe callback for `parameter()` must be return an instance of the given type.\r\n\r\n\r\n### Named Parameters\r\n\r\nBased on [regular expressions][2]\r\n\r\n```php\r\n$app->get('/hello/[.+:name]', function (\\Hahns\\Response\\Json $response, \\Hahns\\Request $request) {\r\n\treturn $response->send([\r\n\t\t'message' => sprintf('hello %s %s', $request->get('first'), $request->get('last'))\r\n});\r\n\r\n$app->get('/hello/[.+:first]/[.+:last]', function (\\Hahns\\Request $request, \\Hahns\\Response\\Json $response) {\r\n\treturn $response->send([\r\n\t\t'message' => sprintf('hello %s %s', $request->get('first'), $request->get('last'))\r\n\t]);\r\n});\r\n\r\n$app->delete('/cars/id-[\\d+:id]/now', function (\\Hahns\\Response\\Json $response, \\Hahns\\Request $request) {\r\n    return $response->send([\r\n        'message' => sprintf('removed card with id `%d`', $request->get('id'))\r\n    ]);\r\n});\r\n```\r\n\r\n### Named Routes\r\n\r\n```php\r\n$app->get('/route1', function () {\r\n    return 'hello world';\r\n}, 'route1');\r\n$app->get('/route2', 'route1', 'route2');\r\n$app->get('/route3', 'route2');\r\n```\r\n\r\nAll GET_request to `/route1`, `/route2` or `/route3` respond\r\n\r\n```\r\nhello world\r\n```\r\n\r\n### Services\r\n\r\n```php\r\n$app->service('myservice', function(\\Hahns\\Hahns $app) {\r\n\t$service = new \\stdClass();\r\n\t$service->test    = 'hello';\r\n\t$service->appName = $app->config('name');\r\n\treturn $service;\r\n});\r\n\r\n$app->get('/service-test', function (\\Hahns\\Services $services) {\r\n\techo $service->test;\r\n});\r\n```\r\n\r\nEvery GET-request to `/service-test` will respond\r\n\r\n```\r\nhello\r\n```\r\n\r\n### Events\r\n\r\nHahns trigger various events. Use the `on`-method to add your own handler.\r\n\r\n#### Not Found (404)\r\n\r\nArguments are:\r\n\r\n* `string $usedRoute`\r\n* `\\Hahns\\Hahns $app`\r\n* `\\Hahns\\Exception\\NotFoundException $e`\r\n\r\n```php\r\n$app->on(\\Hahns\\Hahns::EVENT_NOT_FOUND, function ($usedRoute, \\Hahns\\Hahns $app, \\Hahns\\Exception\\NotFoundException $e) {\r\n    // do something\r\n});\r\n```\r\n\r\nPer default Hahns sends status code 404\r\n\r\n##### Trigger a \"Not Found\" event\r\n\r\nSimply throw a `\\Hahns\\Exception\\NotFoundException`\r\n\r\n```php\r\n$app->get('/not-found', function () {\r\n    throw new \\Hahns\\Exception\\NotFoundException();\r\n});\r\n```\r\n\r\n\r\n#### Error\r\n\r\nArguments are:\r\n\r\n* `\\Exception $e`\r\n* `\\Hahns\\Hahns $app`\r\n\r\n```php\r\n$app->on(\\Hahns\\Hahns::EVENT_ERROR, function (\\Exception $e, \\Hahns\\Hahns $app) {\r\n    // do something\r\n});\r\n```\r\n\r\nPer default Hahns sends status code 500\r\n\r\n##### Trigger an \"Error\" event\r\n\r\nSimply throw a `\\Hahns\\Exception\\ErrorException`\r\n\r\n```php\r\n$app->get('/not-found', function () {\r\n    throw new \\Hahns\\Exception\\NotFoundException();\r\n});\r\n```\r\n\r\n\r\n\r\n#### Before Running\r\n\r\nArguments are:\r\n\r\n* `string $givenRoute`\r\n* `\\Hahns\\Hahns $app`\r\n\r\n```php\r\n$app->on(\\Hahns\\Hahns::EVENT_BEFORE_RUNNING, function ($givenRoute, \\Hahns\\Hahns $app) {\r\n    // do something\r\n});\r\n```\r\n\r\n#### After Running\r\n\r\nArguments are:\r\n\r\n* `string $usedRoute`\r\n* `\\Hahns\\Hahns $app`\r\n\r\n```php\r\n$app->on(\\Hahns\\Hahns::EVENT_AFTER_RUNNING, function ($usedRoute, \\Hahns\\Hahns $app) {\r\n    // do something\r\n});\r\n```\r\n\r\n#### Before Routing\r\n\r\nArguments are:\r\n\r\n* `string $usedRoute`\r\n* `\\Hahns\\Hahns $app`\r\n\r\n```php\r\n$app->on(\\Hahns\\Hahns::EVENT_BEFORE_ROUTING, function ($usedRoute, \\Hahns\\Hahns $app) {\r\n    // do something\r\n});\r\n```\r\n\r\n#### After Routing\r\n\r\nArguments are:\r\n\r\n* `string $usedRoute`\r\n* `\\Hahns\\Hahns $app`\r\n\r\n```php\r\n$app->on(\\Hahns\\Hahns::EVENT_AFTER_ROUTING, function ($usedRoute, \\Hahns\\Hahns $app) {\r\n    // do something\r\n});\r\n```\r\n\r\n#### Before execute matched route\r\n\r\nArguments are:\r\n\r\n* `string $usedRoute`\r\n* `\\Closure $routeCallback`\r\n* `array $argsForCallback`\r\n* `\\Hahns\\Hahns $app`\r\n\r\n```php\r\n$app->on(\\Hahns\\Hahns::EVENT_BEFORE_EXECUTING_ROUTE, function ($usedRoute, \\Closure $routeCallback, $argsForCallback, \\Hahns\\Hahns $app)\r\n    // do something\r\n});\r\n```\r\n\r\n#### After execute matched route\r\n\r\nArguments are:\r\n\r\n* `string $usedRoute`\r\n* `\\Closure $routeCallback`\r\n* `array $argsForCallback`\r\n* `\\Hahns\\Hahns $app`\r\n\r\n```php\r\n$app->on(\\Hahns\\Hahns::EVENT_AFTER_EXECUTING_ROUTE, function ($usedRoute, \\Closure $routeCallback, $argsForCallback, \\Hahns\\Hahns $app)\r\n    // do something\r\n});\r\n```\r\n\r\n## Reference\r\n\r\n### `\\Hahns\\Hahns`\r\n```\r\nvoid            any(string $route, \\Closure $callback)\t                    // register route for all verbs\r\nvoid            any(string $route, string $namedRoute)\t                    // register route for all verbs using the previous route named $namedRoute\r\nvoid            any(string $route, \\Closure $callback, string $name)\t    // register routes for all verbs route with name $name\r\nvoid            any(string $route, string $namedRoute, string $name)\t    // register route for all verbs with name $name using the previous route named $namedRoute\r\nmixed           config(string $name)\t                                    // get value $name from config\r\nvoid            config(string $name, mixed $value)\t                        // set value $value to config\r\nvoid            delete(string $route, \\Closure $callback)\t                // register DELETE-route\r\nvoid            delete(string $route, string $namedRoute)\t                // register DELETE-route using the previous route $namedRoute\r\nvoid            delete(string $route, \\Closure $callback, string $name)\t    // register DELETE-route with name $name\r\nvoid            delete(string $route, string $namedRoute, string $name)\t    // register DELETE-route with name $name using the previous route named $namedRoute\r\nvoid            get(string $route, \\Closure $callback)\t\t                // register GET-route\r\nvoid            get(string $route, string $namedRoute)\t                    // register GET-route using the previous route $namedRoute\r\nvoid            get(string $route, \\Closure $callback, string $name)\t    // register GET-route with name $name\r\nvoid            get(string $route, string $namedRoute, string $name)\t    // register GET-route with name $name using the previous route named $namedRoute\r\nvoid            on(int $event, \\Closure $callback)                          // add handler $callback for event $event\r\nvoid            parameter(string type, \\Closure $callback)                  // register parameter for route callback\r\nvoid            patch(string $route, \\Closure $callback)\t                // register PATCH-route\r\nvoid            patch(string $route, string $namedRoute)\t                // register PATCH-route using the previous route $namedRoute\r\nvoid            patch(string $route, \\Closure $callback, string $name)\t    // register PATCH-route with name $name\r\nvoid            patch(string $route, string $namedRoute, string $name)\t    // register PATCH-route with name $name using the previous route named $namedRoute\r\nvoid            post(string $route, \\Closure $callback)\t                    // register POST-route\r\nvoid            post(string $route, string $namedRoute)\t                    // register POST-route using the previous route $namedRoute\r\nvoid            post(string $route, \\Closure $callback, string $name)\t    // register POST-route with name $name\r\nvoid            post(string $route, string $namedRoute, string $name)\t    // register POST-route with name $name using the previous route named $namedRoute\r\nvoid            put(string $route, \\Closure $callback)\t\t                // register PUT-route\r\nvoid            put(string $route, string $namedRoute)\t                    // register PUT-route using the previous route $namedRoute\r\nvoid            put(string $route, \\Closure $callback, string $name)\t\t// register PUT-route with name $name\r\nvoid            put(string $route, string $namedRoute, string $name)\t    // register PUT-route with name $name using the previous route named $namedRoute\r\nvoid            run()\t\t\t\t\t\t\t\t\t\t                // start routing\r\nobject          service(string $name)\t                                    // get service with name $name\r\nvoid            service(string $name, \\Closure $callback)\t                // register service\r\n```\r\n\r\n### `\\Hahns\\Request`\r\n```\r\nmixed get(string $name)\t\t                    // get GET-param $name or null\r\nmixed get(string $name, mixed $default)\t\t    // get GET-param $name or $default\r\nmixed header(string $name)\t                    // get param $name from request header or null\r\nmixed header(string $name, mixed $default)\t    // get param $name from request header or $default\r\nmixed payload(string $name)\t                    // get param $name from payload (DELETE, PATCH, PUT) or null\r\nmixed payload(string $name, mixed $default)     // get param $name from payload (DELETE, PATCH, PUT) or $default\r\nmixed post(string $name)\t\t                // get POST-param $name or null\r\nmixed post(string $name, mixed $default)\t\t// get POST-param $name or $default\r\n```\r\n\r\n### `\\Hahns\\Response\\Html`\r\n```\r\nvoid   header(string $name, string $value)\t\t                // send header $name with value $value\r\nvoid   redirect(string $location)                               // send location header with status code 301\r\nvoid   redirect(string $location, int $code)                    // send location header with status code $code\r\nstring send(string $data)\t                                    // get $data as html\r\nstring send(string $data, array $header)\t                    // get $data as html and send $header ['name' => 'value'] to to client\r\nvoid   status(int code)                                         // send status code $code with HTTP version 1.1 to client\r\nvoid   status(int code, string $message)                        // send status code $code with message $message to client\r\nvoid   status(int code, string $message, string $httpVersion)   // send status code $code with message $message and HTTP version $version to client\r\n```\r\n\r\n### `\\Hahns\\Response\\Json`\r\n```\r\nvoid   header(string $name, string $value)\t\t                // send header $name with value $value\r\nvoid   redirect(string $location)                               // send location header with status code 301\r\nvoid   redirect(string $location, int $code)                    // send location header with status code $code\r\nstring send(string $data)\t                                    // get $data as json-decoded string\r\nstring send(string $data, array $header)\t                    // get $data as json-decoded string and send $header ['name' => 'value'] to to client\r\nvoid   status(int code)                                         // send status code $code with HTTP version 1.1 to client\r\nvoid   status(int code, string $message)                        // send status code $code with message $message to client\r\nvoid   status(int code, string $message, string $httpVersion)   // send status code $code with message $message and HTTP version $version to client\r\n```\r\n\r\n### `\\Hahns\\Response\\Text`\r\n```\r\nvoid   header(string $name, string $value)\t\t                // send header $name with value $value\r\nvoid   redirect(string $location)                               // send location header with status code 301\r\nvoid   redirect(string $location, int $code)                    // send location header with status code $code\r\nstring send(string $data)\t                                    // get $data as text\r\nstring send(string $data, array $header)\t                    // get $data as text and send $header ['name' => 'value'] to to client\r\nvoid   status(int code)                                         // send status code $code with HTTP version 1.1 to client\r\nvoid   status(int code, string $message)                        // send status code $code with message $message to client\r\nvoid   status(int code, string $message, string $httpVersion)   // send status code $code with message $message and HTTP version $version to client\r\n```\r\n\r\n### `\\Hahns\\Services`\r\n```\r\nobject get(string $name)\t                        // get service with name $name\r\nobject register(string $name, \\Closure $callback)\t// register service with name $name\r\n```\r\n\r\n\r\n[1]: http://getcomposer.org/\r\n[2]: http://en.wikipedia.org/wiki/Regular_expression","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}