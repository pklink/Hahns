{"name":"Hahns","tagline":"micro framework for PHP 5.4+","body":"# Hahns [![Build Status](https://travis-ci.org/pklink/Hahns.png?branch=master)](https://travis-ci.org/pklink/Hahns) [![Dependency Status](https://www.versioneye.com/user/projects/52b89440ec1375c3f500001b/badge.png)](https://www.versioneye.com/user/projects/52b89440ec1375c3f500001b)\r\n\r\nHahns is a micro framework for PHP 5.4 and higher.\r\n\r\n## Installation\r\n\r\nTo install using [composer][1], have the following lines in your `composer.json` file.\r\n\r\n```json\r\n{\r\n  \"require\": {\r\n    \"pklink/Hahns\": \"*\",\r\n  }\r\n}\r\n```\r\n\r\n## Usage\r\n\r\nCreate application\r\n\r\n```php\r\n$app = new \\Hahns\\Hahns();\r\n```\r\n\r\n\r\n```php\r\n$app->get('/', function () {\r\n    return \"hello world!\";\r\n});\r\n\r\n$app->delete('/', function () {\r\n    return \"1\";\r\n});\r\n```\r\n\r\nEvery GET-request to `/` will respond\r\n\r\n```\r\nhello world!\r\n```\r\n\r\nEvery DELETE-request to `/` will respond\r\n\r\n```\r\n1\r\n```\r\n\r\n### Parameters for routing callback\r\n\r\nHahns will set parameters based on the required type automatically\r\n\r\nThe following types are built-in:\r\n\r\n* `\\Hahns\\Hahns`\r\n* `\\Hahns\\Config`\r\n* `\\Hahns\\Request`\r\n* `\\Hahns\\Response\\Html`\r\n* `\\Hahns\\Response\\Json`\r\n* `\\Hahns\\Response\\Text`\r\n* `\\Hahns\\Services`\r\n\r\n```php\r\n$app->get('/', function (\\Hahns\\Request $request) {\r\n    // ...\r\n});\r\n\r\n$app->patch('/', function (\\Hahns\\Response\\Json $response) {\r\n    // ...\r\n});\r\n\r\n$app->post('/cars', function (\\Hahns\\Services $services) {\r\n    // ...\r\n});\r\n\r\n$app->get('/cars', function (\\Hahns\\Services $services, \\Hahns\\Response\\Json $response, \\Hahns\\Request $request) {\r\n    // ...\r\n});\r\n\r\n$app->get('/cars', function (\\Hahns\\Response\\Json $response, \\Hahns\\Services $services) {\r\n    // ...\r\n});\r\n\r\n$app->get('/cars', function (\\Hahns\\Response\\Html $response) {\r\n    // ...\r\n});\r\n\r\n$app->get('/cars', function (\\Hahns\\Response\\Text $response) {\r\n    // ...\r\n});\r\n\r\n$app->get('/blah', function (\\Hahns\\Hahns $app) {\r\n    // ...\r\n});\r\n\r\n$app->get('/config', function (\\Hahns\\Config $config) {\r\n    // ...\r\n});\r\n```\r\n\r\n#### Add your own parameter\r\n\r\n```\r\n$app->parameter('\\\\stdClass', function() {\r\n    $obj = new stdClass();\r\n    $obj->test = 'yup';\r\n    return $obj;\r\n});\r\n\r\n$app->get('/own/parameter', function (\\stdClass $obj) {\r\n    return $obj->test;\r\n});\r\n```\r\n\r\nThe callback for `parameter()` must be return an instance of the given type.\r\n\r\n\r\n### Named Parameters\r\n\r\nBased on [regular expressions][2]\r\n\r\n```php\r\n$app->get('/hello/[.+:name]', function (\\Hahns\\Response\\Json $response, \\Hahns\\Request $request) {\r\n\treturn $response->send([\r\n\t\t'message' => sprintf('hello %s %s', $request->get('first'), $request->get('last'))\r\n});\r\n\r\n$app->get('/hello/[.+:first]/[.+:last]', function (\\Hahns\\Request $request, \\Hahns\\Response\\Json $response) {\r\n\treturn $response->send([\r\n\t\t'message' => sprintf('hello %s %s', $request->get('first'), $request->get('last'))\r\n\t]);\r\n});\r\n\r\n$app->delete('/cars/id-[\\d+:id]/now', function (\\Hahns\\Response\\Json $response, \\Hahns\\Request $request) {\r\n    return $response->send([\r\n        'message' => sprintf('removed card with id `%d`', $request->get('id'))\r\n    ]);\r\n});\r\n```\r\n\r\n### Services\r\n\r\n```php\r\n$app->service('myservice', function() {\r\n\t$service = new \\stdClass();\r\n\t$service->test = 'hello';\r\n\treturn $service;\r\n});\r\n\r\n$app->get('/service-test', function (\\Hahns\\Services $services) {\r\n\techo $service->test;\r\n});\r\n```\r\n\r\nEvery GET-request to `/service-test` will respond\r\n\r\n```\r\nhello\r\n```\r\n\r\n### 404-Handling\r\n\r\nDefault handling is sending a status code of `404`\r\n\r\nAdditionally you can add your own handler:\r\n\r\n```php\r\n$app->notFound(function() {\r\n\t// do something\r\n});\r\n```\r\n\r\n## Reference\r\n\r\n### `\\Hahns\\Hahns`\r\n```\r\n\\Hahns\\Config   config()\t                                    // get instance of \\Hahns\\Config\r\nmixed           config(string $name)\t                        // get value $name from config\r\nvoid            config(string $name, mixed $value)\t            // set value $value to config\r\nvoid            delete(string $route, \\Closure $callback)\t    // register DELETE-route\r\nvoid            get(string $route, \\Closure $callback)\t\t    // register GET-route\r\nvoid            notFound(\\Closure $callback)\t\t\t\t    // add handler for 404\r\nvoid            void parameter(string type, \\Closure $callback) // register parameter for route callback\r\nvoid            patch(string $route, \\Closure $callback)\t    // register PATCH-route\r\nvoid            post(string $route, \\Closure $callback)\t        // register POST-route\r\nvoid            put(string $route, \\Closure $callback)\t\t    // register PUT-route\r\n\\Hahns\\Router   router()                                        // get instance of \\Hanhs\\Router\r\nvoid            run()\t\t\t\t\t\t\t\t\t\t    // start routing\r\nvoid            service(string $name, \\Closure $callback)\t    // register service\r\n\\Hahns\\Services services()\t                                    // register service\r\n```\r\n\r\n### `\\Hahns\\Request`\r\n```\r\nmixed get(string $name, mixed $default = null)\t\t// get GET-param $name or $default\r\nmixed header(string $name, mixed $default = null)\t// get param $name from request header\r\nmixed payload(string $name, mixed $default = null)\t// get param $name from payload (DELETE, PATCH, PUT) or $default\r\nmixed post(string $name, mixed $default = null)\t\t// get POST-param $name or $default\r\n```\r\n\r\n### `\\Hahns\\Response\\Html`\r\n```\r\nvoid   header(string $name, string $value)\t\t                                // send header $name with value $value\r\nvoid   redirect(string $location, int $code = 301)                              // send location header\r\nstring send(string $data, array $header = [])\t                                // get $data as html\r\nvoid   status(int code, string $message = null, string $httpVersion = '1.1')    // send given status code to client\r\n```\r\n\r\n### `\\Hahns\\Response\\Json`\r\n```\r\nvoid   header(string $name, string $value)\t\t                                // send header $name with value $value\r\nvoid   redirect(string $location, int $code = 301)                              // send location header\r\nstring send(array|object $data, array $header = [])\t                            // get $data as json-decoded string\r\nvoid   status(int code, string $message = null, string $httpVersion = '1.1')    // send given status code to client\r\n```\r\n\r\n### `\\Hahns\\Response\\Text`\r\n```\r\nvoid   header(string $name, string $value)\t\t                                // send header $name with value $value\r\nvoid   redirect(string $location, int $code = 301)                              // send location header\r\nstring send(array|object $data, array $header = [])\t                            // get $data as text\r\nvoid   status(int code, string $message = null, string $httpVersion = '1.1')    // send given status code to client\r\n```\r\n\r\n### `\\Hahns\\Services`\r\n```\r\nobject get(string $name)\t// get service with name $name\r\n```\r\n\r\n\r\n[1]: http://getcomposer.org/\r\n[2]: http://en.wikipedia.org/wiki/Regular_expression","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}